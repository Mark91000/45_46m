 1.Как отказаться от изменений в файле (файлах) находящийся в рабочем каталоге (work directory)?

если он в режиме untracked files(проверить с git status)
  git checkout .               отменить измение во всех файлах, где были сделаны изменение
  git checkout fileName.txt    отменить измемение в указанном файле

2.Как вернуть файл из индекса в рабочий каталог?
git restore --staged fileName.txt

3.Как отменить ошибочный commit ?
git reset HEAD~1     – откатиться назад на 1 шаг (1 - количетсво шагов)
ili 
git reset HEAD^^   - откатися назад на 2 шага(^^ - количетсво шагов)

4.Как создать новую ветку и переключится в нее?

git checkout -b (имя новой ветки, на которую переключиться)

5.В чем отличение между fast-forward merge  and non fast-forfard merge?

Их различие заключается в том, что при fast-forward merge всегда создается новый коммит, а при non fast-forfard merge – используются существующие коммиты.


6.Когда может возникнуть конфликт слияния веток, как  его разрешить?

Конфликты слияния возникают, если вносятся конкурирующие изменения в ту же строку файла или если один пользователь изменяет файл, а другой этот же файл удаляет. 

Откройте файл в любом редакторе, чтобы просмотреть и устранить конфликтующий текст. Git добавил набор маркеров для указания экземпляров конфликтующего текста. Например:Текст между <<<<<<< и ======= является целевой версией ветви конфликтующего текста.
Текст между ======= и >>>>>>> является версией исходной ветви конфликтующего текста.

Измените файл, чтобы разрешить конфликтующий текст. Удаляя маркеры конфликтов слиянием, вы сообщаете Git, что вы разрешили конфликт. 

Запустите git add <filename> , чтобы подготовить файл после разрешения всего конфликтующего текста.

Повторите предыдущие шаги для всех файлов с конфликтами содержимого


7.Можно ли удалить ветку? Как? 
  da, 
Git checkout name(имя ветки куда пройти) - надо уити с ветки в которой находиша

git branch -d name(имя ветки, которую надо удалить)


В ответах на вопросы 1-4, 7 необходимо указать конкретные команда git. 
На 5 и 6 вопросы дать объяснение своими словами.
........................................................................
удалить удаленный источник

git remote rm origin
повторно добавьте источник, но с вашим именем пользователя и pwd с правами записи в этом репозитории pvt

git remote add origin 

  511  git add 12345.txt
  512  git commit -m "Ne0 Commit"
  513  git push
$ git push -u origin main

git checkout . otmena posl.izmenenij
git clean -xdn
git clean -xdf -udalenie nenuzhnyh fajlov.
git restore --staged vozvrat faila posle git add
git reset imja faila -- staraja komanda 
----------------------------------------
posle git commit 
git commit --amend -m "Bed commi" + file

git log 
git log --oneline

git status
ubit fail             git reset HEAD~1

posle push
git revert HEAD                  udalenie poslednege pusha

diff                             sravnit

git log --oneline --graph --decorate --all

git branch -v                    gde ja nahozhus
git branch -d test               udalit vetku test

git merge                        objedenenie

git checkout main     perekljuchenie mezhdu vetkami
git status

git checkout -b 
------------------------------------------------------------------------------------------------------------------------
                                    Список часто используемых команд Git

                                          Получение и создание проектов


git init                                                         Инициализация локального git репозитория
                                         
git clone ssh://git@github.com/[username]/[repository-name].git Копирование удаленного git репозитория

                                         Управление снапшотами


git status                          Проверка статуса

git add [file-name.txt]             Добавление файла в stage

git add -A                          Добавление всех новых и измененных файлов в stage

git commit -m "[commit message]"    Создание коммита

git rm -r [file-name.txt]           Удаление файла или каталога

git clean -xdf (n)                  Удалить не отслеживаемые (новые файлы) -n сначала посмотреть 

git checkout [file-name]            Отмена изменений в work directory

git restore --staged [file name]    Возврат файла из stage в work directory

git commit --amend -m "[commit message]"   Изменить, дополнить последний коммит

git revert HEAD                     Изменяет последний коммит на зеркальный

git reset HEAD ~ [number]           Откат на некоторое [number] количество коммитов


                                   Branching & Merging


git branch                         Список веток (астериском отмечена текущая ветка)

git branch [branch name]           Создание новой ветки

git checkout -b [branch name]       Создание новой ветки и переключение на нее

git checkout -b [branch name] origin/[branch name]      Клонирование удаленной ветки и переключение на нее

git branch -m [old branch name] [new branch name]       Переименование локальной ветки

git checkout [branch name]                              Переключение на ветку

git branch -d [branch name]                             Удаление ветки

git push origin --delete [branch name]                 Удаление ветки на уделенном ресурсе

git merge [branch name]                                Объединение ветки в активную ветку

git merge [source branch] [target branch]              Объединение ветки в целевую ветку


                                    Обновление проектов


git push                                Отправка изменений в внешний (удаленный) репозиторий (в сохраненную ветку)

git push origin [branch name]           Отправка ветки в удаленный репозиторий

git push -u origin [branch name]        Отправка ветки в нелокальный репозиторий (с сохранением ветки)

git pull                                Обновление локального репозитория до последнего коммита

git pull origin [branch name]           Получение всех изменений из удаленного репозитоиия

git remote add origin ssh://git@github.com/[username]/[repository-name].git     Добавление удаленного репозитория


                                      Inspection & Comparison


git log                                                Просмотр изменений

git log --oneline                                     Просмотр изменений (сокращенный)

git log --oneline --decorate --graph --all            Отображение веток 

git diff [source branch] [target branch]              Просмотр изменений перед обьединением

git help                                               Помощь по командам git





